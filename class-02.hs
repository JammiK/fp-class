-- 1.1
-- Написать функцию, которая разбивает промежуток времени в секундах на часы, минуты и секунды.
-- Результат возвращать в виде кортежа из трёх элементов. Реализовать также обратное преобразование.
sec2hms :: Int -> (Int, Int, Int)
sec2hms total = (h,m,s)
	where
		h = div total 3600
		m = div (mod total 3600) 60
		s = mod total 60

hms2sec :: (Int, Int, Int) -> Int
hms2sec (h, m, s) = h * 3600 + m * 60 + s

-- Реализовать с помощью hms2sec (здесь параметры заданы по отдельности)
hms2sec' :: Int -> Int -> Int -> Int
hms2sec' h m s = hms2sec (h,m,s)

-- должно быть True
test1 = and $ map (\x -> x == hms2sec (sec2hms x)) [1,10..10000]

-- 1.2
-- Написать функции, вычисляющие
-- а) длину отрезка по координатам его концов;
-- б) периметр и площадь треугольника по координатам вершин.

type Point = (Double, Double)

distance :: Point -> Point -> Double
distance (x1, y1) (x2, y2) = sqrt ((x1 - x2) ^ 2 + (y1 - y2) ^ 2)

-- triangle :: ??? -> (Double, Double)
triangle (x1, y1) (x2, y2) (x3, y3) = (p, s)
  where
    p = distance (x1, y1) (x2, y2) + distance (x1, y1) (x3, y3) + distance (x2, y2) (x3, y3) 
    s = abs ((x1 - x3) * (y2 - y3) - (x2 - x3) * (y1 - y3)) / 2

-- Во всех следующих заданиях использование стандартных функций обработки списков не допускается.
-- Все решения должны реализовываться рекурсивными функциями.

-- 2.1
-- Определить рекурсивную функцию, определяющую количество чётных элементов списка
nEven :: Integral a => [a] -> Int
nEven [] = 0
nEven (x:xs) = k + nEven xs
	where
		k
			| odd x = 0
			| otherwise = 1

-- 2.2
-- Увеличить все элементы заданного списка в два раза.
-- Указание: в решении может понадобиться операция конструирования списка:
-- > 1 : [2,3,4]
--   [1,2,3,4]
doubleElems :: Num a => [a] -> [a]
doubleElems [] = []
doubleElems (x:xs) =  (x * 2) : doubleElems xs

-- 2.3
-- Дан список целых чисел. Сформировать новый список, содержащий только нечетные элементы исходного.
fltOdd :: Integral a => [a] -> [a]
fltOdd [] = []
fltOdd (x:xs)
	| odd x = x : fltOdd xs
	| otherwise = fltOdd xs

-- 2.4
-- Написать следующие функции обработки списков:
-- а) удалить все отрицательные элементы;
-- б) увеличить элементы с чётными значениями в два раза;
-- в) переставить местами чётные и нечётные по порядку следования элементы
--    (для списков нечётной длины отбрасывать последний элемент).

del24 :: Integral a => [a] -> [a]
del24 [] = []
del24 (x:xs)
	| x < 0 = del24 xs
	| otherwise = x : del24 xs

up24 :: Integral a => [a] -> [a]
up24 [] = []
up24 (x:xs)
	| odd x = x : up24 xs
	| otherwise = x * 2 : up24 xs
	
reverse24 [] = []
reverse24 (x1:x2:xs) = x2 : x1 : reverse24 xs
reverse24 x = []
-- 2.5 
-- Даны два списка целых чисел. Сформировать список, каждый элемент которого равен сумме
-- соответствующих   элементов исходных списков. Предусмотреть ситуацию списков разной длины.
combine_plus :: [Integer] -> [Integer] -> [Integer]
combine_plus [] ys = ys
combine_plus xs [] = xs
combine_plus (x:xs) (y:ys) = x + y : combine_plus xs ys

-- 2.6
-- Даны два списка. Сформировать новый список, содержащий пары из соответствующих элементов
-- исходных списков. Хвост более длинного списка отбросить.
combine26 :: [Integer] -> [Integer] -> [(Integer, Integer)]
combine26 [] _ = []
combine26 _ [] = []
combine26 (x:xs) (y:ys) = (x, y) : combine26 xs ys


-- 2.7
-- Написать функции, которые по заданному n возвращают список, состоящий из n первых натуральных чисел
-- а) в порядке убывания;
-- б) в порядке возрастания.
create27a 0 = []
create27a n = n : create27a (n - 1)

create27b 0 = []
create27b n = create27b' 1
	where
		create27b' a
			| a <= n = a : create27b' (a + 1)
			| otherwise = []

-- 2.8
-- Дан элемент типа a и список [a]. Вставить между всеми элементами списка заданный элемент.
addin _ [] = []
addin a (x1:x2:xs) = x1 : a : addin a (x2:xs)
addin _ xs = xs
-- 2.9
-- Написать функцию, которая разбивает список на два подсписка: элементы из начала списка,
-- совпадающие с первым элементом, и все остальные элементы, например:
-- [1,1,1,2,3,1] -> ([1,1,1], [2,3,1]).

div29 (x:xs) = div29' ([x], xs)
	where 
		div29' (list, []) = (list, [])
		div29' ((x:xs), (y:ys))
			| y == x = div29' (x:y:xs, ys)
			| otherwise = (x:xs, y:ys)

--3
-- Даны типовые аннотации функций. Попытайтесь догадаться, что они делают, и напишите их
-- рекурсивные реализации (если вы можете предложить несколько вариантов, реализуйте все):
-- а) [a] -> Int -> a //ищет n-й элемент
searchn n [] = 0
searchn n (x:xs)
	| n == 0 = x
	| n > 0 = searchn (n - 1) xs
	| otherwise = -1

-- б) Eq a => [a] -> a -> Bool //проверка на существование
find _ [] = False
find a (x:xs)
	| x == a = True
	| otherwise = find a xs
-- в) [a] -> Int -> [a] //увеличивает все элементы на число
up' _ [] = []
up' a (x:xs) = (x + a) : up' a xs
-- г) a -> Int -> [a] //сделать массив из n повторяющихся элементов
create3v a n
	| n > 0 = a : create3v a (n - 1)
	| otherwise = []
-- д) [a] -> [a] -> [a] //объединение списков
connect (x:xs) [] = x : xs
connect [] (x:xs) = x : xs
connect (x:xs) (y:ys) = x : connect xs (y:ys)
-- е) Eq a => [a] -> [[a]]
-- ж) [a] -> [(Int, a)]
-- з) Eq a => [a] -> [a] 
